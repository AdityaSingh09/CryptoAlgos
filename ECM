from cryptography.hazmat.primitives.asymmetric import ec
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.hkdf import HKDF
from cryptography.hazmat.backends import default_backend
import time

def code_snippet():
    start_time = time.time()
    private_key = ec.generate_private_key(ec.SECP256K1(), default_backend())
    public_key = private_key.public_key()

    # Encryption function
    def encrypt(public_key, message):
        shared_key = private_key.exchange(ec.ECDH(), public_key)
        derived_key = HKDF(
            algorithm=hashes.SHA256(),
            length=32,
            salt=None,
            info=b'',
            backend=default_backend()
        ).derive(shared_key)
        ciphertext = bytes([derived_key[i % len(derived_key)] ^ message[i] for i in range(len(message))])
        return ciphertext

    # Decryption function
    def decrypt(ciphertext):
        shared_key = private_key.exchange(ec.ECDH(), public_key)
        derived_key = HKDF(
            algorithm=hashes.SHA256(),
            length=32,
            salt=None,
            info=b'',
            backend=default_backend()
        ).derive(shared_key)
        decrypted_message = bytes([derived_key[i % len(derived_key)] ^ ciphertext[i] for i in range(len(ciphertext))])
        return decrypted_message

    # Example usage:
    message = b'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Mollis nunc sed id semper risus in hendrerit gravida. Sit amet nisl purus in mollis nunc sed id semper. Tempor nec feugiat nisl pretium fusce id velit ut tortor. Vitae suscipit tellus mauris a diam maecenas. Tristique nulla aliquet enim tortor at auctor urna nunc id. Leo vel fringilla est ullamcorper eget nulla facilisi etiam. Elementum curabitur vitae nunc sed velit dignissim. Tortor at risus viverra adipiscing at in tellus. Amet nulla facilisi morbi tempus iaculis urna id volutpat. Leo vel fringilla est ullamcorper eget nulla facilisi etiam dignissim. Nulla at volutpat diam ut venenatis tellus in metus vulputate.Sit amet commodo nulla facilisi nullam. Purus gravida quis blandit turpis cursus in. Elementum curabitur vitae nunc sed velit dignissim sodales. Lacus vel facilisis volutpat est velit egestas dui. Nunc pulvinar sapien et ligula ullamcorper. At urna condimentum mattis pellentesque. Libero nunc consequat interdum varius. Ullamcorper velit sed ullamcorper morbi tincidunt ornare massa eget egestas. A iaculis at erat pellentesque adipiscing commodo. Rhoncus est pellentesque elit ullamcorper dignissim. Risus feugiat in ante metus dictum at tempor. Tellus in hac habitasse platea dictumst vestibulum rhoncus. Amet facilisis magna etiam tempor orci eu lobortis elementum nibh. Sit amet justo donec enim diam vulputate. Turpis massa tincidunt dui ut ornare. Facilisi cras fermentum odio eu feugiat pretium nibh ipsum consequat. Accumsan lacus vel facilisis volutpat est velit egestas.'
    ciphertext = encrypt(public_key, message)
    end_time = time.time()
    decrypted_message = decrypt(ciphertext)

    execution_time = end_time - start_time
    print("Original message:", message)
    print("Encrypted message:", ciphertext)
    print("Decrypted message:", decrypted_message)
    print("Execution time:", execution_time, "Seconds")
    result =  execution_time
    return result

# Loop the code snippet and calculate average
num_iterations = 1000
total_result = 0

for _ in range(num_iterations):
    result = code_snippet()
    total_result += result

average_result = total_result / num_iterations

print("Average Result:", average_result,'Seconds')


